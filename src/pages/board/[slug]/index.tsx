import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";

import TimeAgo from 'javascript-time-ago'

import en from 'javascript-time-ago/locale/en.json'

TimeAgo.addDefaultLocale(en)

import Navbar from "../../../components/Navbar";
import Footer from "../../../components/Footer";
import RequestCard from "../../../components/RequestCard";
import BoardCard from "../../../components/BoardCard";

import * as Separator from '@radix-ui/react-separator';
import React, { useEffect, useRef, useState } from "react";
import autoAnimate from "@formkit/auto-animate";

import { createProxySSGHelpers } from '@trpc/react-query/ssg';
import { GetServerSidePropsContext, InferGetServerSidePropsType } from 'next';
import { createContextInner } from '../../../server/trpc/context';
import { appRouter } from '../../../server/trpc/router/_app';
import superjson from 'superjson';
import { trpc } from "../../../utils/trpc";
import Layout from "../../../components/Layout";

export default function Board(props: InferGetServerSidePropsType<typeof getServerSideProps>,
) {
  const { slug } = props;

  const createPrayerRequest = trpc.prayerRequest.create.useMutation(
    {
      onSuccess: () => boardQuery.refetch()
    }
  );
  const boardQuery = trpc.prayerBoard.bySlug.useQuery(
    {slug: slug},
    {
      refetchInterval: 4000
    }
  );

  const { data } = boardQuery;

  const [requestMessage, setRequestMessage] = useState<string>("");
  const [requestAuthor, setRequestAuthor] = useState<string>("");
  const [showRequestForm, setShowRequestForm] = useState<boolean>(false);
  const parentRef = useRef(null);
  const requestsParentRef = useRef(null);

  const reveal = () => setShowRequestForm(!showRequestForm);

  useEffect(() => {
    parentRef.current && autoAnimate(parentRef.current);
    requestsParentRef.current && autoAnimate(requestsParentRef.current);
  }, [parentRef, requestsParentRef])

  const requestFormHandler = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    createPrayerRequest.mutate({ boardSlug: slug, message: requestMessage, author: requestAuthor });
    setRequestMessage("");
    setRequestAuthor("");

    
    setTimeout(() => {
      reveal();
    }, 600)
    
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <Navbar />
        <div className="lg:px-36 xl:px-42 px-7 pb-10" ref={parentRef}>
          {/* {JSON.stringify(board)} */}
          <div className="py-5 grid grid-cols-1 md:grid-cols-2 gap-5">
            { data &&
              <BoardCard 
                name={data.name}
                slug={data.slug}
                numRequests={data._count.prayerRequests}
                numMembers={data.numMembers}
              />
            }
          </div>

          {
            showRequestForm ?
            <form 
              className="flex flex-col gap-6 py-6"
              onSubmit={requestFormHandler}
            >
              <div>
                <label className="font-medium px-5" htmlFor="message">Prayer Request <span className="text-teal-600">*</span></label>
                <textarea 
                  rows={4}
                  className="resize-none p-5 w-[100%] h-50 rounded-md bg-gray-700 outline-teal-500"
                  placeholder="What do you need prayer for?"
                  name="message"
                  value={requestMessage}
                  onChange={(e) => setRequestMessage(e.target.value)}
                  required
                />
              </div>
              <div className="flex items-center gap-5">
                <div className="flex-1">
                  <label className="font-medium px-5" htmlFor="name">Author (not required)</label>
                  <input className="p-5 py-4 w-[100%] rounded-md bg-gray-700 outline-teal-500" type="text" 
                      placeholder="What is your name?"
                      name="name"
                      value={requestAuthor}
                      onChange={(e) => setRequestAuthor(e.target.value)}
                      required
                      disabled={createPrayerRequest.isLoading}
                  />
                </div>
                <input 
                  className="text-md p-2 px-4 bg-transparent text-cyan-500 hover:text-cyan-400 transition-colors" 
                  type="button"
                  value="Cancel"
                  onClick={reveal}
                />
                <input 
                  className="text-md p-2 px-4 bg-cyan-800 text-cyan-50 rounded-full outline-teal-500 hover:bg-cyan-700 transition-colors" 
                  type="submit"
                  value="Request Prayer"
                />
              </div>
            </form>
            :
            <div className="flex items-center pb-6">
              <button 
                className="text-md p-2 px-4 bg-cyan-800 text-cyan-50 rounded-full outline-teal-500 hover:bg-cyan-700 transition-colors"
                onClick={reveal}
              >
                Request Prayer
              </button>
            </div>
          }
          <Separator.Root 
            className="SeparatorRoot my-2 bg-gray-800 h-[1px]"
            decorative
            orientation="horizontal"
          />
          <div className="py-5 grid grid-cols-1 md:grid-cols-2 gap-5 w-[100%]" ref={requestsParentRef}>
            {data && data.prayerRequests.map((prayerRequest) => (
              <RequestCard 
                id={prayerRequest.id}
                message={prayerRequest.message}
                author={prayerRequest.author}
                numPrayedFor={prayerRequest.numPrayedFor}
                date={prayerRequest.createdAt}
                refetch={boardQuery.refetch}
              />
            ))}
          </div>
        </div>
        <Footer />
      </Layout>
    </>
  );
};

export async function getServerSideProps(context: GetServerSidePropsContext<{ slug: string }>,
) {
  const slug = context?.params?.slug;

  if (!slug) {
    return {
      notFound: true,
    }
  }

  const ssg = await createProxySSGHelpers({
    router: appRouter,
    ctx: await createContextInner(),
    transformer: superjson,
  });

  const allBoards = await ssg.prayerBoard.getAll.fetch();
  if (!allBoards.some((board) => board.slug === slug)) {
    return {
      notFound: true,
    }
  }

  await ssg.prayerBoard.bySlug.prefetch( {slug: slug} );

  return {
    props: {
      trpcState: ssg.dehydrate(),
      slug: slug,
    }
  }
}
